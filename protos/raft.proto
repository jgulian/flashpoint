syntax = "proto3";

package protos.raft;

service Raft {
  rpc Start (StartRequest) returns (stream StartResponse) {}

  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {}
  rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse) {}
  rpc InstallSnapshot (InstallSnapshotRequest) returns (InstallSnapshotResponse) {}
}

message Peer {
  message ConnectionData {
    string address = 1;
    //TODO: support security
  }

  string id = 1;
  ConnectionData data = 2;
  bool voting = 3;
}

message Config {
  repeated Peer peers = 1;
}

enum LogDataType {
  COMMAND = 0;
  CONFIG = 1;
}

message LogEntry {
  uint64 index = 1;
  uint32 term = 2;

  bytes data = 4;
  LogDataType type = 5;

  bool command_valid = 6;
}

message StartRequest {
  bytes data = 1;
  LogDataType type = 2;
}

message StartResponse {
  oneof data {
    Peer leader = 1;
    bool successful = 2;
  }
}

message AppendEntriesRequest {
  uint32 term = 1;
  string leader_id = 2;

  uint64 prev_log_index = 3;
  uint32 prev_log_term = 4;

  repeated LogEntry entries = 5;

  uint64 leader_commit_index = 6;
}

message AppendEntriesResponse {
  uint32 term = 1;
  string leader_id = 2;
  bool success = 3;

  uint64 conflict_index = 4;
  sint64 conflict_term = 5;
}

message RequestVoteRequest {
  uint32 term = 1;
  string candidate_id = 2;
  uint64 last_log_index = 3;
  uint32 last_log_term = 4;
}

message RequestVoteResponse {
  uint32 term = 1;
  string leader_id = 2;
  bool vote_granted = 3;
}

message InstallSnapshotRequest {
  uint32 term = 1;
  string leader_id = 2;

  uint32 snapshot_id = 3;
  uint32 chunk_offset = 4;
  bytes chunk = 5;
  bool last_chunk = 6;
}

message InstallSnapshotResponse {
  uint32 term = 1;
  string leader_id = 2;
}

message Snapshot {
  uint32 snapshot_id = 1;
  uint64 last_included_index = 2;
  uint32 last_included_term = 3;

  string file = 4;
  uint64 file_size = 5;
  uint32 chunk_count = 6;
}

message RaftState {
  message PeerState {
    Peer peer = 1;
    uint64 match_index = 2;
    uint64 next_index = 3;
    uint32 snapshot_id = 4;
    uint32 chunk_offset = 5;
  }

  repeated PeerState peers = 1;
  repeated LogEntry entries = 2;
  Config base_config = 3;

  uint64 log_offset = 4;
  uint64 log_size = 5;
  uint32 current_term = 6;

  optional string voted_for = 7;
  string me = 8;

}